package rules.price;

import com.ftn.sbnz.model.models.MenuItem;
import com.ftn.sbnz.model.models.Order;

dialect  "mvel"

declare DiscountApplication
    order: Order
    discount: Double
end

rule "Apply Discount"
    salience 1
    when
        $discountApplication: DiscountApplication(!(discount == null), $order: order, $orderPrice: order.totalPrice, $discount: discount)
    then
        modify($order){setTotalPrice($orderPrice * (1 - $discount))}
end

rule "Calculate Order Price"
    salience 2
    lock-on-active true
    when
        $order: Order($items: items, $distance: deliveryDistance, $discount: customer.getDiscount())
        accumulate(
            MenuItem($price: price) from $items,
            $totalItemPrice: sum($price)
        )
    then
        modify($order){setTotalPrice($totalItemPrice + $distance * 1.1)}
        insert(new DiscountApplication($order, $discount))
end
